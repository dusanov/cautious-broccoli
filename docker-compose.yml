version: '3.1'
services:

  profetisa:
    image: profetisa
    container_name: profetisa
    build:
      context: profetisa
      dockerfile: Dockerfile
    develop:
      watch:
        - action: rebuild
          path: profetisa/src
    ports:
      - "8001:8001"
    volumes:
      - ${PWD}/profetisa/model/llama-2-7b-chat.Q2_K.gguf:/code/model/llama-2-7b-chat.Q2_K.gguf
    networks:
      - claudia-network

  embedder:
    image: embedder
    container_name: embedder
    build:
      context: embeddings
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ${PWD}/embeddings/model/all-MiniLM-L6-v2:/code/model/all-MiniLM-L6-v2
    networks:
      - claudia-network

  # front:
  #   image: claudia-front
  #   container_name: claudia-front
  #   build:
  #     context: front
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - claudia-network

  mongo-db:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_DATABASE: claudia  
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_container:/data/db
      - ${PWD}/storage/init/mongo-init.js:/docker-entrypoint-initdb.d/a.js
    networks:
      - claudia-network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - 8081:8081
    depends_on:
      - mongo-db
    restart: always      
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: q
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    networks:
      - claudia-network

networks: 
    claudia-network:
      driver: bridge

# requires: docker volume create --name mongodb_data_container
volumes:
    mongodb_data_container:
      external: true
